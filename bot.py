import requests
import time
import pandas as pd

# ---------------------------
# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏
# ---------------------------
DISCORD_WEBHOOK = "https://discord.com/api/webhooks/1405226935604215838/OQElV-CBe-_Hb4D13nSR-OZDG4jaGznQok62qv_AJw6glQzA3blizSvbTugn9sD8yxRA"
PAIRS = ["EURUSD", "GBPUSD", "USDJPY"]  # –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
SLEEP_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
EMA_PERIOD = 10
RSI_PERIOD = 14
RSI_OVERBOUGHT = 70
RSI_OVERSOLD = 30
MAX_HISTORY = 100  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

# ---------------------------
# üìå –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–Ω
# ---------------------------
price_history = {pair: [] for pair in PAIRS}

# ---------------------------
# üìå –§—É–Ω–∫—Ü–∏–∏
# ---------------------------
def send_to_discord(message):
    try:
        requests.post(DISCORD_WEBHOOK, json={"content": message}, timeout=5)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Discord: {e}")

def get_price(pairs):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ä–∞–∑—É –≤—Å–µ –ø–∞—Ä—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    if not pairs:
        return {}

    url = f"https://www.freeforexapi.com/api/live?pairs={','.join(pairs)}"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        data = r.json() if r.content else {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç rates
        if not isinstance(data, dict):
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API (–Ω–µ dict): {data}")
            return {}
        if "rates" not in data or data.get("code") != 200:
            print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç API: {data}")
            return {}

        rates = {}
        for pair in pairs:
            rate_info = data["rates"].get(pair)
            if rate_info is not None:
                rates[pair] = rate_info.get("rate")
            else:
                print(f"‚ö†Ô∏è –ù–µ—Ç –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è {pair} –≤ –æ—Ç–≤–µ—Ç–µ API")
        return rates
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ç–∏—Ä–æ–≤–æ–∫: {e}")
        return {}

def calculate_ema(series, period):
    return pd.Series(series).ewm(span=period, adjust=False).mean().iloc[-1]

def calculate_rsi(series, period):
    series = pd.Series(series)
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -1 * delta.clip(upper=0)
    ma_up = up.ewm(span=period, adjust=False).mean()
    ma_down = down.ewm(span=period, adjust=False).mean()
    rs = ma_up / ma_down
    rsi = 100 - (100 / (1 + rs))
    return rsi.iloc[-1]

# ---------------------------
# üìå –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# ---------------------------
def main():
    last_signal = {pair: None for pair in PAIRS}
    send_to_discord("‚úÖ Forex —Å–∫—Ä–∏–ø—Ç –Ω–∞ Free Forex API –∑–∞–ø—É—â–µ–Ω!")

    while True:
        rates = get_price(PAIRS)
        if not rates:
            time.sleep(SLEEP_INTERVAL)
            continue

        for pair, price in rates.items():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            history = price_history[pair]
            history.append(price)
            if len(history) > MAX_HISTORY:
                history.pop(0)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
            if len(history) >= EMA_PERIOD + RSI_PERIOD:
                ema = calculate_ema(history, EMA_PERIOD)
                rsi = calculate_rsi(history, RSI_PERIOD)
                signal = None

                # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
                if price > ema and rsi < RSI_OVERBOUGHT:
                    signal = "BUY"
                elif price < ema and rsi > RSI_OVERSOLD:
                    signal = "SELL"

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
                if signal and signal != last_signal[pair]:
                    send_to_discord(f"üí° {pair} —Å–∏–≥–Ω–∞–ª: {signal}\n–¶–µ–Ω–∞: {price:.5f}, EMA{EMA_PERIOD}: {ema:.5f}, RSI{RSI_PERIOD}: {rsi:.2f}")
                    last_signal[pair] = signal

        time.sleep(SLEEP_INTERVAL)

if __name__ == "__main__":
    main()
